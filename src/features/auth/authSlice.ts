import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../../app/store'
import { loginUser, logoutUser } from './authAPI'

export interface AuthState {
  isLoggedIn: boolean;
  username: string;
  status: loginStatus 
}

const initialState: AuthState = {
  isLoggedIn: false,
  username: '',
  status: null,
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
  'auth/login',
  async ({username, password} : any) => {
    const response = await loginUser({username, password})
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
)

export const logoutAsync = createAsyncThunk(
  'auth/logout',
  async (username: string) => {
    const response = await logoutUser(username)
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
)

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
   
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder 
      .addCase(logoutAsync.fulfilled, (state, action) => {
        switch (action.payload.status) {
          case logoutStatus.LogoutSuceed:
            return {
              ...state,
              isLoggedIn: false,
              username: null,
              status: action.payload.status,
            }
            break;
          case logoutStatus.LogoutFailed:
            return {
              ...state,
              status: action.payload.status,
            }
            break;
          case logoutStatus.SomethingHorribleHappened:
            return {
              ...state,
              status: action.payload.status,
            }
            break;
          default:
            return state;
        }
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        switch (action.payload.status) {
          case loginStatus.LoginSuceeded:
            return {
              ...state,
              isLoggedIn: true,
              username: action.payload.username,
              status: action.payload.status,
            }
            break;
          case loginStatus.LoginFailed:
            return {
              ...state,
              isLoggedIn: false,
              username: null,
              status: action.payload.status,
            }
            break;
          case loginStatus.SomethingHorribleHappened:
            return {
              ...state,
              isLoggedIn: false,
              username: null,
              status: action.payload.status,
            }
            break;
          default:
            return state;
        }
      })
  },
})

export default authSlice.reducer

export const enum loginStatus {
  LoginSuceeded = 'login succeeded', 
  LoginFailed = 'login failed', 
  SomethingHorribleHappened = 'Something horrible happened'
}

export const enum logoutStatus {
  LogoutSuceed = 'logout succeed', 
  LogoutFailed = 'logout failed', 
  SomethingHorribleHappened = 'Something horrible happened'
}

export const selectAuth = (state: AppState) => state.auth
